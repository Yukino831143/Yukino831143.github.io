{"meta":{"title":"yukino","subtitle":null,"description":"一枚程序员的日常","author":"yukino","url":""},"pages":[{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-04-11T08:06:25.935Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-07-12T17:26:11.126Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[Yukino] 与&nbsp; Yukino&nbsp; （ Yukino ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-04-11T08:06:25.935Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-04-11T08:06:25.936Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura 主题balabala","keywords":"Lab实验室"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-04-07T15:17:05.788Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-04-11T08:06:25.936Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-04-11T08:06:25.937Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-04-07T15:17:05.790Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-04-07T15:17:05.790Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-04-11T08:06:25.937Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-07-12T17:26:11.127Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-04-07T15:17:05.791Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"原型模式","slug":"技术/原型模式","date":"2020-10-07T14:28:00.000Z","updated":"2020-10-07T15:14:41.085Z","comments":true,"path":"2020/10/07/技术/原型模式/","link":"","permalink":"/2020/10/07/技术/原型模式/","excerpt":"","text":"基本介绍 原型模式(Prototype模式)是指:用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象 1.基本类型的拷贝CODE public class Sheep implements Cloneable{ public String name; public int age; public Sheep friend;//是对象, 克隆是会如何处理, 默认是浅拷贝 public Sheep(String name, int age) { this.name = name; this.age = age; } @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); } } public class Client { public static void main(String[] args) throws CloneNotSupportedException { Sheep sheep1 = new Sheep(&quot;zhangsan&quot;,1); Sheep sheep2 = new Sheep(&quot;lisi&quot;, 2); sheep1.friend = sheep2; sheep2.friend = sheep1; Sheep sheep3 = (Sheep)sheep1.clone(); System.out.println(sheep3 == sheep1);//false System.out.println(sheep3.friend == sheep1.friend);//true } } 注意 成员变量为对象时，克隆是浅拷贝，使用默认拷贝是拷贝的地址 2.深拷贝基本介绍 复制对象的所有基本数据类型的成员变量值 为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象(包括对象的引用类型)进行拷贝 深拷贝实现方式1:重写clone方法来实现深拷贝 深拷贝实现方式2:通过对象序列化实现深拷贝(推荐) CODE package blog.prototype; import java.io.Serializable; public class DeepCloneableTarget implements Serializable, Cloneable { public String cloneName; public String cloneClass; public DeepCloneableTarget(String cloneName, String cloneClass) { this.cloneName = cloneName; this.cloneClass = cloneClass; } //因为该类的属性，都是 String , 因此我们这里使用默认的 clone 完成即可 @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); } } package blog.prototype; import java.io.*; public class DeepProtoType implements Serializable, Cloneable { public String name; public DeepCloneableTarget deepCloneableTarget; //深拷贝 - 方式 1 使用clone 方法 @Override protected Object clone() throws CloneNotSupportedException { Object deep = null; //这里完成对基本数据类型(属性)和 String 的克隆 deep = super.clone(); //对引用类型的属性，进行单独处理 DeepProtoType deepProtoType = (DeepProtoType)deep; deepProtoType.deepCloneableTarget = (DeepCloneableTarget)deepCloneableTarget.clone(); return deepProtoType; } //深拷贝 - 方式 2 通过对象的序列化实现 (推荐) public Object deepClone() { //创建流对象 ByteArrayOutputStream bos = null; ObjectOutputStream oos = null; ByteArrayInputStream bis = null; ObjectInputStream ois = null; DeepProtoType copyObj = null; try { //序列化 bos = new ByteArrayOutputStream(); oos = new ObjectOutputStream(bos); oos.writeObject(this); //当前这个对象以对象流的方式输出 //反序列化 bis = new ByteArrayInputStream(bos.toByteArray()); ois = new ObjectInputStream(bis); copyObj = (DeepProtoType)ois.readObject(); } catch (Exception e) { e.printStackTrace(); } finally { try { bos.close(); oos.close(); bis.close(); ois.close(); } catch (IOException e) { e.printStackTrace(); } } return copyObj; } } package blog.prototype; public class Client { public static void main(String[] args) throws CloneNotSupportedException { DeepCloneableTarget deepCloneableTarget = new DeepCloneableTarget(&quot;cloneName&quot;,&quot;cloneClass&quot;); DeepProtoType deepProtoType = new DeepProtoType(); deepProtoType.name = &quot;DeepProtoType&quot;; deepProtoType.deepCloneableTarget = deepCloneableTarget; DeepProtoType deepProtoType1 = (DeepProtoType) deepProtoType.clone(); System.out.println(deepProtoType1.name); System.out.println(deepProtoType1.deepCloneableTarget.cloneName); System.out.println(deepProtoType.deepCloneableTarget == deepProtoType1.deepCloneableTarget);//false DeepProtoType deepProtoType2 = (DeepProtoType) deepProtoType.deepClone(); System.out.println(deepProtoType2.name); System.out.println(deepProtoType2.deepCloneableTarget.cloneName); System.out.println(deepProtoType.deepCloneableTarget == deepProtoType2.deepCloneableTarget);//false } } 优缺点 创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率 不用重新初始化对象，而是动态地获得对象运行时的状态 如果原始对象发生变化(增加或者减少属性)，其它克隆对象的也会发生相应的变化，无需修改代码 在实现深克隆的时候可能需要比较复杂的代码 缺点:需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了 ocp 原则，这点请注意.","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"/tags/设计模式/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"工厂模式","slug":"技术/工厂模式","date":"2020-10-07T06:00:00.000Z","updated":"2020-10-07T15:10:02.769Z","comments":true,"path":"2020/10/07/技术/工厂模式/","link":"","permalink":"/2020/10/07/技术/工厂模式/","excerpt":"","text":"1.简单工厂模式看一个披萨的项目:要便于披萨种类的扩展，要便于维护 披萨的种类很多(比如 GreekPizz、CheesePizz 等) 披萨的制作有 prepare，bake, cut, box 完成披萨店订购功能。 思路 把创建 Pizza 对象封装到一个类中，这样我们有新的 Pizza 种类时，只需要修改该类就可，其它有创建到 Pizza 对象的代码就不需要修改了 UML package blog.factory; import blog.factory.pizza.CheesePizza; import blog.factory.pizza.GreekPizza; import blog.factory.pizza.Pizza; public class SimpleFactory { //简单工厂模式 public Pizza createPizza(String orderType) { Pizza pizza = null; if (orderType.equals(&quot;奶酪&quot;)) { pizza = new CheesePizza(); pizza.setName(&quot;奶酪披萨&quot;); } else if (orderType.equals(&quot;希腊&quot;)) { pizza = new GreekPizza(); pizza.setName(&quot;希腊披萨&quot;); } return pizza; } //简单工厂模式，静态工厂模式 public static Pizza createPizza2(String orderType) { Pizza pizza = null; if (orderType.equals(&quot;奶酪&quot;)) { pizza = new CheesePizza(); pizza.setName(&quot;奶酪披萨&quot;); } else if (orderType.equals(&quot;希腊&quot;)) { pizza = new GreekPizza(); pizza.setName(&quot;希腊披萨&quot;); } return pizza; } } package blog.factory; import blog.factory.pizza.Pizza; public class OrderPizza { private SimpleFactory simpleFactory; public OrderPizza(SimpleFactory simpleFactory) { this.simpleFactory = simpleFactory; } public void makePizza(String orderType) { Pizza pizza = simpleFactory.createPizza(orderType); pizza.prepare(); pizza.bake(); pizza.cut(); pizza.box(); } } package blog.factory; public class Test { public static void main(String[] args) { OrderPizza orderPizza = new OrderPizza(new SimpleFactory()); orderPizza.makePizza(&quot;希腊&quot;); } } package blog.factory.pizza; public abstract class Pizza { private String name; //不同类型制作材料的准备不同 public abstract void prepare(); public void bake() { System.out.println(name + &quot;baking&quot;); } public void cut() { System.out.println(name + &quot;cutting&quot;); } public void box() { System.out.println(name + &quot;boxing&quot;); } public String getName() { return name; } public void setName(String name) { this.name = name; } } package blog.factory.pizza; public class GreekPizza extends Pizza { @Override public void prepare() { System.out.println(&quot;给希腊披萨准备原材料&quot;); } } package blog.factory.pizza; public class CheesePizza extends Pizza{ @Override public void prepare() { System.out.println(&quot;制作奶酪披萨，准备材料&quot;); } } 2.工厂方法模式需求 披萨项目新的需求:客户在点披萨时，可以点不同口味的披萨，比如 北京的奶酪 pizza、北京的希腊 pizza 或 者是伦敦的奶酪 pizza、伦敦的希腊 pizza。 思路 使用简单工厂模式，创建不同的简单工厂类，比如 BJPizzaSimpleFactory、LDPizzaSimpleFactory 等等.从当前这个案例来说，也是可以的，但是考虑到项目的规模，以及软件的可维护性、可扩展性并不是特别好 工厂方法模式设计方案:将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现。 工厂方法模式:定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例 化推迟到子类。UML CODE public abstract class PizzaFactory { public abstract Pizza createPizza(String orderType); } public class BJPizzaFactory extends PizzaFactory{ @Override public Pizza createPizza(String orderType) { Pizza pizza = null; if (orderType.equals(&quot;cheese&quot;)) { pizza = new BJGreekPizza(); } else if (orderType.equals(&quot;greek&quot;)) { pizza = new BJGreekPizza(); } return pizza; } } public class LDPizzaFactory extends PizzaFactory{ @Override public Pizza createPizza(String orderType) { Pizza pizza = null; if (orderType.equals(&quot;cheese&quot;)) { pizza = new LDCheesePizza(); } else if (orderType.equals(&quot;greek&quot;)) { pizza = new LDGreekOPizza(); } return pizza; } } public class Order { private PizzaFactory pizzaFactory; public Order(PizzaFactory pizzaFactory) { this.pizzaFactory = pizzaFactory; } public void makePizza(String type) { Pizza pizza = pizzaFactory.createPizza(type); pizza.prepare(); pizza.bake(); pizza.cut(); pizza.box(); } } public class Client { public static void main(String[] args) { Order order = new Order(new LDPizzaFactory()); order.makePizza(&quot;greek&quot;); } } 3.抽象工厂模式思路 将工厂抽象成两层，AbsFactory(抽象工厂) 和 具体实现的工厂子类，完成了对地点BJ和LD的区分 UML CODE public interface AbsFactory { public Pizza createPizza(String orderType); } public class BJFactory implements AbsFactory { @Override public Pizza createPizza(String orderType) { Pizza pizza = null; if (orderType.equals(&quot;cheese&quot;)) { pizza = new BJCheesePizza(); } else if (orderType.equals(&quot;greek&quot;)) { pizza = new BJGreekPizza(); } return pizza; } } public class LDFactory implements AbsFactory { @Override public Pizza createPizza(String orderType) { Pizza pizza = null; if (orderType.equals(&quot;cheese&quot;)) { pizza = new LDCheesePizza(); } else if (orderType.equals(&quot;greek&quot;)) { pizza = new LDGreekOPizza(); } return pizza; } } public class Order { private AbsFactory absFactory; public Order(AbsFactory absFactory) { this.absFactory = absFactory; } public void makePizza(String type) { Pizza pizza = absFactory.createPizza(type); pizza.prepare(); pizza.bake(); pizza.cut(); pizza.box(); } } public class Client { public static void main(String[] args) { Order order = new Order(new LDFactory()); order.makePizza(&quot;cheese&quot;); } }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"/tags/设计模式/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"单例模式","slug":"技术/单例模式","date":"2020-10-06T14:28:00.000Z","updated":"2020-10-06T14:30:45.475Z","comments":true,"path":"2020/10/06/技术/单例模式/","link":"","permalink":"/2020/10/06/技术/单例模式/","excerpt":"","text":"1.饿汉式(静态常量)package blog.singleton; public class SingletonTest { public static void main(String[] args) { Singleton singleton1 = Singleton.getInstance(); Singleton singleton2 = Singleton.getInstance(); System.out.println(singleton1 == singleton2); } } class Singleton { // 1.构造器私有化，防止外部new private Singleton() {} // 2.在装载时，完成实例化 private final static Singleton instance = new Singleton(); // 3.通过公有静态方法，返回实例对象 public static Singleton getInstance() { return instance; } } 优点 类装载的时候就完成实例化。避免了线程同步问题。 缺点 在类装载的时候就完成实例化，没有达到LazyLoading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费 这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大 多数都是调用 getInstance 方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式(或者其他的静 态方法)导致类装载，这时候初始化 instance 就没有达到 lazy loading 的效果 结论 这种单例模式可用，可能造成内存浪费 2.饿汉式(静态代码块)class Singleton { private Singleton() {} private static Singleton instance; { instance = new Singleton(); } public static Singleton getInstance() { return instance; } } 优点缺点这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执 行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。 结论这种单例模式可用，但是可能造成内存浪费 3.懒汉式(线程不安全)class Singleton { private static Singleton instance; private Singleton(){} public static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } } 优缺点 起到了LazyLoading的效果，但是只能在单线程下使用。 如果在多线程下，一个线程进入了if(singleton==null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式 结论 实际开发中，不要使用这种方式. 4.懒汉式(线程安全，同步方法，不推荐使用)class Singleton { private static Singleton instance; private Singleton(){}; //提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题 public static synchronized Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } } 优缺点 解决了线程安全问题 效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接 return 就行了。方法进行同步效率太低 结论 实际开发中，不推荐使用这种方式 5. 懒汉式(线程安全，同步代码块，不推荐)class Singleton { private static Singleton instance; private Singleton(){}; public static Singleton getInstance() { if (instance == null) { synchronized (Singleton.class) { instance = new Singleton(); } } return instance; } } 优缺点 与上一个模式同样，解决了线程安全问题，但效率太低了 6.双重检查(推荐使用)class Singleton { private static volatile Singleton instance;//volatile 很重要 private Singleton() {} //加入双重检查代码，解决线程安全问题, 同时解决懒加载问题,同时保证了效率, 推荐使用 public static synchronized Singleton getInstance() { if (instance == null) { synchronized (Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } } 优缺点 Double-Check 概念是多线程开发中常使用到的，如代码中所示，我们进行了两次 if (singleton == null)检查，这 样就可以保证线程安全了。 这样，实例化代码只用执行一次，后面再次访问时，判断if(singleton==null)，直接return实例化对象，也避 免的反复进行方法同步. 线程安全;延迟加载;效率较高 volatile 禁止指令重排 结论 在实际开发中，推荐使用这种单例设计模式 7.静态内部类(推荐)class Singleton { private static volatile Singleton instance;//volatile 很重要 private Singleton() {} private static class SingletonInstance { private static final Singleton INSTANCE = new Singleton(); } public static synchronized Singleton getInstance() { return SingletonInstance.INSTANCE; } } 优缺点 这种方式采用了类装载的机制来保证初始化实例时只有一个线程。 静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载 SingletonInstance 类，从而完成 Singleton 的实例化。 类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。 避免了线程不安全，利用静态内部类特点实现延迟加载，效率高 结论 推荐使用 8.枚举（推荐使用）package blog.singleton; public class SingletonTest { public static void main(String[] args) { Singleton singleton1 = Singleton.INSTANCE; Singleton singleton2 = Singleton.INSTANCE; System.out.println(singleton1 == singleton2); singleton1.sayOk(); } } // enum Singleton { INSTANCE;//枚举实例 public void sayOk() { System.out.println(&quot;ok~&quot;); } } 优缺点 这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建 新的对象。 这种方式是EffectiveJava作者JoshBloch提倡的方式 结论 推荐使用 9.使用场景需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即:重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session 工厂等)","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"/tags/设计模式/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}